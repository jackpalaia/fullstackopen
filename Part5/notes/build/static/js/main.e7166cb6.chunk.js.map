{"version":3,"sources":["components/Note.js","services/notes.js","components/Notification.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","axios","get","then","response","data","newObj","post","id","put","Notification","message","type","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","nMessage","setNMessage","nType","setNType","useEffect","noteService","notesToShow","filter","map","key","find","n","changedNote","setTimeout","catch","error","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","concat","value","onChange","target","ReactDOM","render","document","getElementById"],"mappings":"sNAeeA,EAbF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UACf,qBACA,iBAEJ,OACE,wBAAIC,UAAU,QACXJ,EAAKK,QACN,4BAAQC,QAASL,GAAmBC,K,gBCS3B,EAfA,WAEb,OADgBK,IAAMC,IAHR,cAICC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAa5B,EAVA,SAAAC,GAEb,OADgBL,IAAMM,KARR,aAQsBD,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ5B,EALA,SAACG,EAAIF,GAElB,OADgBL,IAAMQ,IAAN,UAbF,aAaE,YAAwBD,GAAMF,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCH5BK,EAXM,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,QAASC,EAAW,EAAXA,KAC/B,OAAgB,OAAZD,EACK,KAGP,yBAAKb,UAAWc,GACbD,ICyFQE,EA5FH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,IAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,KAGAC,EAHA,OAIgBN,mBAAS,MAJzB,mBAITO,EAJS,KAICC,EAJD,OAKUR,mBAAS,MALnB,mBAKTS,EALS,KAKFC,EALE,KAOhBC,qBAAU,WACRC,IAEGvB,MAAK,SAAAC,GACJY,EAASZ,QAEZ,IAEH,IAkDMuB,EAAcR,EAChBJ,EACAA,EAAMa,QAAO,SAAAlC,GAAI,OAAIA,EAAKG,aAE9B,OACE,6BACE,qCACA,kBAAC,EAAD,CAAcc,QAASU,EAAUT,KAAMW,IACvC,4BAAQvB,QAAS,kBAAMoB,GAAYD,KAAnC,QACQA,EAAU,YAAc,OAEhC,4BACGQ,EAAYE,KAAI,SAAAnC,GAAI,OACnB,kBAAC,EAAD,CAAMoC,IAAKpC,EAAKc,GAAId,KAAMA,EAAMC,iBAAkB,kBA3C/B,SAAAa,GACzB,IAAMd,EAAOqB,EAAMgB,MAAK,SAAAC,GAAC,OAAIA,EAAExB,KAAOA,KAChCyB,EAAW,2BAAQvC,GAAR,IAAcG,WAAYH,EAAKG,YAEhD6B,EACUlB,EAAIyB,GACX9B,MAAK,SAAAC,GACJY,EAASD,EAAMc,KAAI,SAAAnC,GAAI,OAAIA,EAAKc,KAAOA,EAAKJ,EAAWV,MACvD8B,EAAS,QACTF,EAAY,SAAD,OAAUlB,EAASL,QAAnB,mCAAqDK,EAASP,YACzEqC,YAAW,WACTZ,EAAY,QACX,QAEJa,OAAM,SAAAC,GACLZ,EAAS,OACTF,EAAY,SAAD,OACA5B,EAAKK,QADL,0CAGXmC,YAAW,WACTZ,EAAY,QACX,QAELN,EAASD,EAAMa,QAAO,SAAAI,GAAC,OAAIA,EAAExB,KAAOA,MAoBwB6B,CAAmB3C,EAAKc,WAGpF,0BAAM8B,SAlEM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjB1C,QAASkB,EACTyB,MAAM,IAAIC,MAAOC,cACjB/C,UAAWgD,KAAKC,SAAW,IAE7BpB,EACUe,GACPtC,MAAK,SAAAC,GACJY,EAASD,EAAMgC,OAAO3C,IACtBc,EAAW,IACXM,EAAS,QACTF,EAAY,SAAD,OAAUlB,EAASL,QAAnB,YACXmC,YAAW,WACTZ,EAAY,QACX,UAmDH,2BACE0B,MAAO/B,EACPgC,SAvBiB,SAACV,GACxBrB,EAAWqB,EAAMW,OAAOF,UAwBpB,4BAAQpC,KAAK,UAAb,W,MCtFRuC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.e7166cb6.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n  const label = note.important\r\n    ? 'make not important'\r\n    : 'make important';\r\n\r\n  return (\r\n    <li className='note'>\r\n      {note.content}\r\n      <button onClick={toggleImportance}>{label}</button>\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default Note","import axios from 'axios'\r\n\r\nconst baseURL = '/api/notes'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseURL)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObj => {\r\n  const request = axios.post(baseURL, newObj)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObj) => {\r\n  const request = axios.put(`${baseURL}/${id}`, newObj)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, update }","import React from 'react'\r\n\r\nconst Notification = ({ message, type }) => {\r\n  if (message === null) {\r\n    return null\r\n  }\r\n  return (\r\n    <div className={type}>\r\n      {message}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Notification","import React, { useState, useEffect } from 'react'\r\nimport Note from './components/Note'\r\nimport noteService from './services/notes'\r\nimport Notification from './components/Notification'\r\n\r\nconst App = () => {\r\n  const [notes, setNotes] = useState([])\r\n  const [newNote, setNewNote] = useState('')\r\n  const [showAll, setShowAll] = useState(true);\r\n  const [nMessage, setNMessage] = useState(null)\r\n  const [nType, setNType] = useState(null)\r\n\r\n  useEffect(() => {\r\n    noteService\r\n      .getAll()\r\n      .then(response => {\r\n        setNotes(response)\r\n      })\r\n  }, [])\r\n\r\n  const addNote = (event) => {\r\n    event.preventDefault();\r\n    const noteObject = {\r\n      content: newNote,\r\n      date: new Date().toISOString(),\r\n      important: Math.random() < .5,\r\n    }\r\n    noteService\r\n      .create(noteObject)\r\n      .then(response => {\r\n        setNotes(notes.concat(response))\r\n        setNewNote('')\r\n        setNType('good')\r\n        setNMessage(`note '${response.content}' added`)\r\n        setTimeout(() => {\r\n          setNMessage(null)\r\n        }, 3000)\r\n      })\r\n  }\r\n\r\n  const toggleImportanceOf = id => {\r\n    const note = notes.find(n => n.id === id)\r\n    const changedNote = { ...note, important: !note.important }\r\n\r\n    noteService\r\n      .update(id, changedNote)\r\n      .then(response => {\r\n        setNotes(notes.map(note => note.id === id ? response : note))\r\n        setNType('good')\r\n        setNMessage(`note '${response.content}' importance changed to ${response.important}`)\r\n        setTimeout(() => {\r\n          setNMessage(null)\r\n        }, 3000)\r\n      })\r\n      .catch(error => {\r\n        setNType('bad')\r\n        setNMessage(\r\n          `Note '${note.content}' was already removed from the server`\r\n        )\r\n        setTimeout(() => {\r\n          setNMessage(null)\r\n        }, 3000)\r\n      })\r\n      setNotes(notes.filter(n => n.id !== id))\r\n  }\r\n\r\n  const handleNoteChange = (event) => {\r\n    setNewNote(event.target.value)\r\n  }\r\n\r\n  const notesToShow = showAll\r\n    ? notes\r\n    : notes.filter(note => note.important)\r\n\r\n  return (\r\n    <div>\r\n      <h1>Notes</h1>\r\n      <Notification message={nMessage} type={nType} />\r\n      <button onClick={() => setShowAll(!showAll)}>\r\n        show {showAll ? 'important' : 'all'}\r\n      </button>\r\n      <ul>\r\n        {notesToShow.map(note =>\r\n          <Note key={note.id} note={note} toggleImportance={() => toggleImportanceOf(note.id)}/>\r\n        )}\r\n      </ul>\r\n      <form onSubmit={addNote}>\r\n        <input \r\n          value={newNote}\r\n          onChange={handleNoteChange}\r\n        />\r\n        <button type='submit'>save</button>\r\n      </form>\r\n  </div>\r\n  )\r\n}\r\n\r\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}